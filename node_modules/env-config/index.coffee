_ = require 'underscore'
_s = require 'underscore.string'

module.exports = (prefix, spec, env) ->

    unless env?
        env = spec
        spec = prefix
        prefix = null

    throw new Error 'missing argument `spec`' unless spec?
    throw new Error 'missing argument `env`' unless env?

    config = {}

    _.each spec, (type, name) ->
        envVarName = ''
        envVarName += prefix + '_' if prefix?
        envVarName += _s.underscored(name).toUpperCase()
        value = env[envVarName]

        error = (message, suffix = true) ->
            parts = ['environment variable', envVarName, message]
            parts.push 'but is', value if suffix
            throw new Error parts.join ' '

        error 'is missing or empty', false if (not value?) or (value is '')

        config[name] = switch type
            when 'string' then value
            when 'int'
                intValue = parseInt value, 10
                error 'must be an integer' if isNaN intValue
                intValue
            when 'float'
                floatValue = parseFloat value
                error 'must be a float' if isNaN floatValue
                floatValue
            when 'bool'
                if not (value in ['true', 'false'])
                    error "must be a boolean ('true' or 'false')"
                value is 'true'
            else throw new Error "invalid type in specification of #{name}"

    config
