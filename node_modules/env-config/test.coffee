envConfig = require './index'

module.exports =

    'throw exception if env-var':

        'is missing': (test) ->
            test.throws ->
                envConfig 'MY_PROJECT', {mysqlUser: 'string'}, {}
            test.done()

        'is empty': (test) ->
            test.throws ->
                envConfig 'MY_PROJECT', {mysqlUser: 'string'}, {mysqlUser: ''}
            test.done()

        "isn't int": (test) ->
            test.throws ->
                envConfig 'MY_PROJECT', {port: 'int'}, {MY_PROJECT_PORT: 'foo'}
            test.done()

        "isn't bool": (test) ->
            test.throws ->
                envConfig 'MY_PROJECT', {logInfo: 'bool'},
                    MY_PROJECT_LOG_INFO: 'foo'
            test.done()

        "isn't float": (test) ->
            test.throws ->
                envConfig 'MY_PROJECT', {provisionRate: 'float'},
                    MY_PROJECT_PROVISION_RATE: 'foo'
            test.done()

    'read env-var of type':

        'string': (test) ->
            actual = envConfig 'MY_PROJECT', {mysqlUser: 'string'},
                MY_PROJECT_MYSQL_USER: 'foo'
            test.deepEqual actual, {mysqlUser: 'foo'}
            test.done()

        'int': (test) ->
            actual = envConfig 'MY_PROJECT', {port: 'int'},
                MY_PROJECT_PORT: '8080'
            test.deepEqual actual, {port: 8080}
            test.done()

        'bool - true': (test) ->
            actual = envConfig 'MY_PROJECT', {logInfo: 'bool'},
                MY_PROJECT_LOG_INFO: 'true'
            test.deepEqual actual, {logInfo: true}
            test.done()

        'bool - false': (test) ->
            actual = envConfig 'MY_PROJECT', {logInfo: 'bool'},
                MY_PROJECT_LOG_INFO: 'false'
            test.deepEqual actual, {logInfo: false}
            test.done()

        'float': (test) ->
            actual = envConfig 'MY_PROJECT', {provisionRate: 'float'},
                MY_PROJECT_PROVISION_RATE: '0.2'
            test.deepEqual actual, {provisionRate: 0.2}
            test.done()

    'read three env-vars': (test) ->
        spec =
            port: 'int'
            logInfo: 'bool'
            provisionRate: 'float'
        actual = envConfig 'MY_PROJECT', spec,
            MY_PROJECT_PORT: '8080'
            MY_PROJECT_LOG_INFO: 'true'
            MY_PROJECT_PROVISION_RATE: '0.2'
        test.deepEqual actual,
            port: 8080
            logInfo: true
            provisionRate: 0.2
        test.done()

    'prefix is optional': (test) ->
        spec =
            port: 'int'
            logInfo: 'bool'
            provisionRate: 'float'
        actual = envConfig spec,
            PORT: '8080'
            LOG_INFO: 'true'
            PROVISION_RATE: '0.2'
        test.deepEqual actual,
            port: 8080
            logInfo: true
            provisionRate: 0.2
        test.done()
